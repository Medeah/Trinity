# Parser tests

# Types and declarations (and comments)
Boolean t = true;
# and stuff
Scalar s = 1;
Vector [ 3 ] v=[1,5,6];
Vector[10] w=[1.. 10];
Matrix[1,2] m= [1,2][4,5];

# Expressions
Scalar s = 1+ 2 * (3    + 4) /1.5 - s;
Scalar t = v[2  ];
Scalar u = m[2, 3];
m^2;
m';

# Loops and enumeration
for Scalar s in v do
 print(s);
end

for Scalar v in [1,2,3] do print(0); end

for Scalar v in [1..5] do for Scalar x in [1,2] do print(0); end end

Scalar mathias() do
if frederik then for Scalar s in [1..10] do print(10); end else for Scalar v in [1,2][1,2] do 1+1; end end
end

# Conditionals
if m == v * v then   Matrix[2,1] x = [1][0];
elseif 1 +2 != 4 or 5 ==2 + 2 then
print(m);
elseif true and false then print(  m); else
    Scalar leet = 1337; end

if !something then
    if somethingElse then this(); elseif true then that(1+2); elseif [1,2] == 3 then hello; else 1+1; end
else
 Scalar a=1+2*2^1-1;
end

# blawks!
do call(); end
do stuff(); do 1+2; end end

# Function declaration
Matrix[2,1] f(Scalar s1, Scalar s2) do
    Matrix[2,1] m = [s1] [s2];
        m;
end

Matrix[N,  N ] matrixMul( Matrix[N,N]   A,   Matrix[N,N] B) do
 A *B;
end

Scalar sf() do 2 + 2;
end

Boolean v(Scalar a) do 1+1; return true; end

# Functions calls
Matrix[2,1] n = f(5,20  +3);
fire(parma,skinke, gideon, 2 +2e3, xz/lol-(os),arnejohn);
Matrix[  3,3] mat = [1,2,  3][4,5,6][  7,8, 9];
matrixMul(mat,   mat');
# ending comment